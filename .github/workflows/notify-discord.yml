name: Notify Discord on status change

on:
  workflow_dispatch:
  schedule:
    - cron: "*/5 * * * *"

permissions:
  contents: write

concurrency:
  group: bedrock-status
  cancel-in-progress: true

env:
  API_URL: https://mc-server-status-black.vercel.app/api/bedrock
  STATUS_DIR: .status

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          persist-credentials: true

      - name: Install jq & curl
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl

      - name: Ensure cache dir
        run: mkdir -p "$STATUS_DIR"

      - name: Fetch live status
        id: fetch
        shell: bash
        run: |
          set -euo pipefail

          # 1) Live abrufen
          if ! curl -fsSL "$API_URL" -o "$STATUS_DIR/live_raw.json"; then
            echo '{}' > "$STATUS_DIR/live_raw.json"
          fi

          # 2) JSON validieren
          if ! jq -e . "$STATUS_DIR/live_raw.json" >/dev/null 2>&1; then
            echo '{}' > "$STATUS_DIR/live_raw.json"
          fi

          # 3) FIX: Korrekte Datumskonvertierung
          jq -r '
            def parse_timestamp:
              if type == "string" then
                try fromdateiso8601 catch now
              elif type == "number" then
                .
              else
                now
              end;

            . as $root |
            ($root.lastChanged // $root.updatedAt // $root.timestamp // now) | parse_timestamp as $ts |
            {
              online: ($root.online // false),
              version: ($root.version // $root.bedrockVersion // "unknown"),
              motd: ($root.motd // $root.serverName // ""),
              players: {
                online: ($root.players.online // $root.playersOnline // 0),
                max: ($root.players.max // $root.playersMax // 0),
                sample: ($root.players.sample // [])
              },
              checked_at_unix: ($ts | floor),
              checked_at_iso: ($ts | strftime("%Y-%m-%d %H:%M:%S UTC"))
            }
          ' "$STATUS_DIR/live_raw.json" > "$STATUS_DIR/live.json"

          # 4) Fingerprint
          printf '%s\t%s\t%s\n' \
            "$(jq -r '.online' "$STATUS_DIR/live.json")" \
            "$(jq -r '.players.online' "$STATUS_DIR/live.json")" \
            "$(jq -r '.version' "$STATUS_DIR/live.json")" \
            > "$STATUS_DIR/live.fingerprint"

          if [ -f "$STATUS_DIR/prev.fingerprint" ]; then
            if cmp -s "$STATUS_DIR/live.fingerprint" "$STATUS_DIR/prev.fingerprint"; then
              echo "changed=0" >> "$GITHUB_OUTPUT"
            else
              echo "changed=1" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "changed=1" >> "$GITHUB_OUTPUT"
          fi

      - name: Load previous status
        if: steps.fetch.outputs.changed == '1'
        run: test -f "$STATUS_DIR/prev.json" || echo '{}' > "$STATUS_DIR/prev.json"

      - name: Send Discord notification
        if: steps.fetch.outputs.changed == '1'
        env:
          WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        shell: bash
        run: |
          set -euo pipefail

          # Debug: Webhook-URL prÃ¼fen
          if [ -z "${WEBHOOK_URL:-}" ]; then
            echo "ERROR: DISCORD_WEBHOOK_URL Secret ist nicht gesetzt!"
            exit 1
          fi

          ONLINE=$(jq -r '.online' "$STATUS_DIR/live.json")
          PLAYERS=$(jq -r '.players.online' "$STATUS_DIR/live.json")
          VERSION=$(jq -r '.version' "$STATUS_DIR/live.json")
          CHECKED=$(jq -r '.checked_at_iso' "$STATUS_DIR/live.json")
          COLOR=$([ "$ONLINE" = "true" ] && echo 3066993 || echo 15158332)

          # Payload erstellen
          jq -n \
            --arg online "$ONLINE" \
            --arg players "$PLAYERS" \
            --arg version "$VERSION" \
            --arg checked "$CHECKED" \
            --argjson color "$COLOR" '
            {
              embeds: [{
                title: "Bedrock Server Status",
                description: (if $online=="true" then "ðŸŸ¢ **ONLINE**" else "ðŸ”´ **OFFLINE**" end),
                color: $color,
                fields: [
                  {name: "Players", value: ($players + " online"), inline: true},
                  {name: "Version", value: $version, inline: true},
                  {name: "Checked", value: $checked, inline: false}
                ],
                timestamp: (now | todate)
              }]
            }
          ' > payload.json

          echo "Sending Discord notification..."
          cat payload.json
          
          # Discord webhook senden
          HTTP_CODE=$(curl -w "%{http_code}" -o response.txt -fsSL \
            -H "Content-Type: application/json" \
            -d @payload.json \
            "$WEBHOOK_URL")

          echo "Discord Response Code: $HTTP_CODE"
          cat response.txt || true

          if [ "$HTTP_CODE" != "204" ] && [ "$HTTP_CODE" != "200" ]; then
            echo "ERROR: Discord webhook failed with code $HTTP_CODE"
            exit 1
          fi

          echo "Discord notification sent successfully!"

      - name: Update cache
        if: steps.fetch.outputs.changed == '1'
        shell: bash
        run: |
          set -euo pipefail
          cp "$STATUS_DIR/live.json" "$STATUS_DIR/prev.json"
          cp "$STATUS_DIR/live.fingerprint" "$STATUS_DIR/prev.fingerprint"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add "$STATUS_DIR/prev.json" "$STATUS_DIR/prev.fingerprint"
          git commit -m "chore(status): update bedrock status [skip ci]" || exit 0
          git push
