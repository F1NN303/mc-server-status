name: Notify Discord on status change

on:
  schedule:
    # alle 10 Minuten prÃ¼fen (anpassen, wenn du willst)
    - cron: "*/10 * * * *"
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: notify-discord
  cancel-in-progress: true

env:
  API_URL: "https://mc-server-status-black.vercel.app/api/bedrock"
  CACHE_FILE: ".github/cache/live.json"

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main
          persist-credentials: true

      - name: Install jq & curl
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Ensure cache dir
        run: mkdir -p "$(dirname '${{ env.CACHE_FILE }}')"

      - name: Fetch live status
        id: live
        shell: bash
        env:
          API_URL: ${{ env.API_URL }}
        run: |
          set -euo pipefail
          echo "GET ${API_URL}"
          if ! curl --fail --show-error --silent --max-time 12 --retry 2 --retry-delay 2 "$API_URL" -o live_raw.json; then
            echo "curl failed â†’ treat as offline"
            echo '{"ok":false,"generated":null,"service":{}}' > live_raw.json
          fi

          # Normalize: ok(bool), generated(ISO)
          live_ok=$(jq -r 'if has("ok") and (.ok|type=="boolean") then .ok else false end' live_raw.json)
          live_ts=$(jq -r '.generated // now|todate' live_raw.json)

          echo "ok=$live_ok"           >> "$GITHUB_OUTPUT"
          echo "ts=$live_ts"           >> "$GITHUB_OUTPUT"
          echo "json=$(jq -c '.' live_raw.json)" >> "$GITHUB_OUTPUT"

      - name: Load previous status (if any)
        id: prev
        shell: bash
        env:
          CACHE_FILE: ${{ env.CACHE_FILE }}
        run: |
          set -euo pipefail
          if [ -s "$CACHE_FILE" ]; then
            cp "$CACHE_FILE" prev.json
            prev_ok=$(jq -r '.ok // empty' prev.json)
            prev_ts=$(jq -r '.generated // empty' prev.json)
          else
            echo '{"ok":null,"generated":null}' > prev.json
            prev_ok=""
            prev_ts=""
          fi
          echo "ok=$prev_ok"  >> "$GITHUB_OUTPUT"
          echo "ts=$prev_ts"  >> "$GITHUB_OUTPUT"

      - name: Check change and (optionally) notify Discord
        shell: bash
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          set -euo pipefail

          # Inputs from previous steps
          live_ok='${{ steps.live.outputs.ok }}'
          live_ts='${{ steps.live.outputs.ts }}'
          prev_ok='${{ steps.prev.outputs.ok }}'

          # Decide change
          change="no"
          if [ -z "${prev_ok}" ] || [ "${prev_ok}" != "${live_ok}" ]; then
            change="yes"
          fi

          # Status styling
          if [ "${live_ok}" = "true" ]; then
            status_txt="online"
            color=3066993        # green
            emoji="ðŸŸ¢"
          else
            status_txt="offline"
            color=15158332       # red
            emoji="ðŸ”´"
          fi

          # Build RFC3339 timestamp
          live_epoch=$(date -u -d "${live_ts}" +%s 2>/dev/null || date -u +%s)
          ts_rfc3339=$(date -u -d "@${live_epoch}" +'%Y-%m-%dT%H:%M:%SZ')

          # Only notify when:
          #   - a webhook exists, AND
          #   - status changed
          if [ -n "${DISCORD_WEBHOOK:-}" ] && [ "${change}" = "yes" ]; then
            title="Minecraft Bedrock ist ${status_txt}"
            desc="Zeitpunkt: ${ts_rfc3339}"

            # Build JSON payload robustly with jq -n
            payload=$(
              jq -n \
                --arg username "MC Status" \
                --arg title "${emoji} ${title}" \
                --arg description "${desc}" \
                --arg footer "mc-server-status" \
                --arg timestamp "${ts_rfc3339}" \
                --argjson color ${color} \
                '{
                  username: $username,
                  embeds: [{
                    title: $title,
                    description: $description,
                    color: $color,
                    footer: { text: $footer },
                    timestamp: $timestamp
                  }]
                }'
            )

            echo "Posting to Discordâ€¦"
            curl -sS -X POST "${DISCORD_WEBHOOK}" \
              -H "Content-Type: application/json" \
              -d "${payload}" \
              || echo "WARN: Discord webhook request failed (non-fatal)."
          else
            if [ -z "${DISCORD_WEBHOOK:-}" ]; then
              echo "No DISCORD_WEBHOOK secret set â†’ skipping Discord post."
            else
              echo "No status change â†’ skipping Discord post."
            fi
          fi

      - name: Update cache file (commit only if changed)
        shell: bash
        env:
          CACHE_FILE: ${{ env.CACHE_FILE }}
        run: |
          set -euo pipefail
          echo '${{ steps.live.outputs.json }}' | jq '{ok, generated}' > "${CACHE_FILE}"

          if git diff --quiet -- "${CACHE_FILE}"; then
            echo "Cache unchanged."
          else
            git config user.name  "${{ github.actor }}"
            git config user.email "${{ github.actor }}@users.noreply.github.com"
            git add "${CACHE_FILE}"
            git commit -m "notify-cache: $(date -u +%FT%TZ)"
            git push origin main
            echo "Cache updated."
          fi