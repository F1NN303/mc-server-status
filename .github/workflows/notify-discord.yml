name: Notify Discord on status change

on:
  schedule:
    # alle 10 Minuten prÃ¼fen (beliebig Ã¤ndern)
    - cron: "*/10 * * * *"
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: notify-discord
  cancel-in-progress: true

env:
  API_URL: "https://mc-server-status-black.vercel.app/api/bedrock"
  CACHE_FILE: ".github/cache/live.json"

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main
          persist-credentials: true

      - name: Install jq & curl
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Create cache dir (if missing)
        run: mkdir -p "$(dirname '${{ env.CACHE_FILE }}')"

      - name: Fetch live status
        id: live
        shell: bash
        env:
          API_URL: ${{ env.API_URL }}
        run: |
          set -euo pipefail
          echo "GET ${API_URL}"
          if ! curl --fail --show-error --silent --max-time 12 --retry 2 --retry-delay 2 "$API_URL" -o live_raw.json; then
            echo "curl failed â†’ fallback offline"
            echo '{"ok":false,"generated":null,"service":{}}' > live_raw.json
          fi

          # generated â†’ ISO, ok â†’ boolean, Fallbacks
          live_ok=$(jq -r 'if has("ok") and (.ok|type=="boolean") then .ok else false end' live_raw.json)
          live_ts=$(jq -r '.generated // now|todate' live_raw.json)

          echo "ok=$live_ok"           >> "$GITHUB_OUTPUT"
          echo "ts=$live_ts"           >> "$GITHUB_OUTPUT"
          echo "json=$(cat live_raw.json | jq -c '.') " >> "$GITHUB_OUTPUT"

      - name: Load previous status (if any)
        id: prev
        shell: bash
        env:
          CACHE_FILE: ${{ env.CACHE_FILE }}
        run: |
          set -euo pipefail
          if [ -s "$CACHE_FILE" ]; then
            cp "$CACHE_FILE" prev.json
            prev_ok=$(jq -r '.ok // empty' prev.json)
            prev_ts=$(jq -r '.generated // empty' prev.json)
          else
            echo '{"ok":null,"generated":null}' > prev.json
            prev_ok=""
            prev_ts=""
          fi
          echo "ok=$prev_ok"  >> "$GITHUB_OUTPUT"
          echo "ts=$prev_ts"  >> "$GITHUB_OUTPUT"

      - name: Check change and notify
        if: ${{ secrets.DISCORD_WEBHOOK != '' }}
        shell: bash
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          set -euo pipefail

          live_ok='${{ steps.live.outputs.ok }}'
          live_ts='${{ steps.live.outputs.ts }}'
          prev_ok='${{ steps.prev.outputs.ok }}'

          # Status-Text + Farbe + Emoji
          if [ "$live_ok" = "true" ]; then
            status_txt="online"
            color=3066993        # grÃ¼n
            emoji="ðŸŸ¢"
          else
            status_txt="offline"
            color=15158332       # rot
            emoji="ðŸ”´"
          fi

          # Hat sich der Status geÃ¤ndert?
          change="no"
          if [ -z "${prev_ok}" ] || [ "$prev_ok" != "$live_ok" ]; then
            change="yes"
          fi

          title="Minecraft Bedrock ist ${status_txt}"
          # Zeitstempel in RFC3339
          live_epoch=$(date -u -d "${live_ts}" +%s 2>/dev/null || date -u +%s)
          ts_rfc3339=$(date -u -d "@${live_epoch}" +'%Y-%m-%dT%H:%M:%SZ')

          if [ "$change" = "yes" ]; then
            echo "Status change detected â†’ sending Discord notification."

            # Beschreibung
            desc="Zeitpunkt: ${ts_rfc3339}"

            # Payload robust mit jq -n bauen (kein Here-Doc, keine YAML-Fallen)
            payload=$(jq -n \
              --arg username "MC Status" \
              --arg title "${emoji} ${title}" \
              --arg description "${desc}" \
              --arg footer "mc-server-status" \
              --arg timestamp "${ts_rfc3339}" \
              --argjson color ${color} \
              '{
                username: $username,
                embeds: [{
                  title: $title,
                  description: $description,
                  color: $color,
                  footer: { text: $footer },
                  timestamp: $timestamp
                }]
              }')

            curl -sS -X POST "$DISCORD_WEBHOOK" \
              -H "Content-Type: application/json" \
              -d "$payload" \
              || echo "WARN: Discord webhook request failed (non-fatal)."
          else
            echo "No status change â†’ no Discord post."
          fi

      - name: Update cache file (commit only if changed)
        shell: bash
        env:
          CACHE_FILE: ${{ env.CACHE_FILE }}
        run: |
          set -euo pipefail
          echo '${{ steps.live.outputs.json }}' | jq '{ok, generated}' > "${CACHE_FILE}"

          if git diff --quiet -- "${CACHE_FILE}"; then
            echo "Cache unchanged."
          else
            git config user.name  "${{ github.actor }}"
            git config user.email "${{ github.actor }}@users.noreply.github.com"
            git add "${CACHE_FILE}"
            git commit -m "notify-cache: $(date -u +%FT%TZ)"
            git push origin main
            echo "Cache updated."
          fi