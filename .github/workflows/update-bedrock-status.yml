name: Update Bedrock Status

on:
  schedule:
    # alle 5 Minuten
    - cron: "*/5 * * * *"
  workflow_dispatch: {}

permissions:
  contents: write

# FIX: cancel-in-progress wieder auf true
concurrency:
  group: bedrock-status
  cancel-in-progress: true

env:
  FILEPATH: "data/status.json"
  KEEP: "2016"    # 7 Tage à 5-Minuten-Slots
  API_URL: "https://mc-server-status-black.vercel.app/api/bedrock"

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 5  # Neu: Max 5 Min pro Run
    
    steps:
      - name: Random jitter (0–45s) to avoid thundering herd
        run: sleep $(( RANDOM % 46 ))

      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main
          persist-credentials: true

      - name: Show workflow permissions (debug)
        run: |
          echo "GITHUB_TOKEN available: ${{ secrets.GITHUB_TOKEN != '' }}"
          echo "Actor: ${{ github.actor }}"
          echo "Ref:   ${{ github.ref }}"

      - name: Install jq & curl
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Ensure status file exists
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$(dirname "$FILEPATH")"
          if [ ! -s "$FILEPATH" ]; then
            jq -n \
              --arg name "Minecraft Bedrock" \
              --arg host "important-instrumentation.gl.at.ply.gg" \
              --argjson port 18232 \
              '{generated:"", service:{name:$name, host:$host, port:$port}, history:[]}' \
              > "$FILEPATH"
            echo "Created $FILEPATH"
          else
            echo "Found $FILEPATH"
          fi

      - name: Pull latest from API (retry, robust)
        id: ping
        shell: bash
        run: |
          set -euo pipefail
          : "${API_URL:?API_URL not set}"
          echo "GET $API_URL"
          
          # 3 Versuche mit kürzerem Timeout
          if ! curl --fail --show-error --silent --max-time 10 --retry 2 --retry-delay 1 "$API_URL" -o resp.json; then
            echo "curl failed → treat as offline"
            echo '{"ok":false,"generated":null,"service":{}}' > resp.json
          fi

          # .ok muss bool sein – sonst offline
          if ! jq -e 'has("ok") and (.ok|type=="boolean")' resp.json > /dev/null; then
            echo "response has no boolean .ok → force offline"
            jq '.ok=false' resp.json > resp.fixed.json && mv resp.fixed.json resp.json
          fi

          # Outputs für nachfolgende Steps
          {
            printf 'ok=%s\n'    "$(jq -r '.ok' resp.json)"
            printf 'ts=%s\n'    "$(jq -r '.generated // (now|todate)' resp.json)"
            printf 'host=%s\n'  "$(jq -r '.service.host // empty' resp.json)"
            printf 'port=%s\n'  "$(jq -r '.service.port // empty' resp.json)"
          } >> "$GITHUB_OUTPUT"

      - name: Append + trim history (only keep latest window)
        shell: bash
        run: |
          set -euo pipefail
          ts='${{ steps.ping.outputs.ts }}'
          ok='${{ steps.ping.outputs.ok }}'
          host='${{ steps.ping.outputs.host }}'
          port='${{ steps.ping.outputs.port }}'

          : "${ts:=$(date -u +%FT%TZ)}"
          : "${ok:=false}"

          jq --arg ts "$ts" \
             --argjson ok ${ok} \
             --arg host "$host" \
             --argjson port ${port:-0} \
             --argjson keep ${KEEP:-2016} '
              if .service == null then .service = {} else . end |
              .service.host = (if $host != "" then $host else .service.host end) |
              .service.port = (if $port != 0  then $port else .service.port end) |
              .history += [{"ts":$ts,"ok":$ok}] |
              .history |= (.[-($keep|tonumber):] // .) |
              .generated = $ts
            ' "$FILEPATH" > "$FILEPATH.tmp"

          mv "$FILEPATH.tmp" "$FILEPATH"

      - name: Commit & push if changed
        shell: bash
        run: |
          set -euo pipefail
          if git diff --quiet -- "$FILEPATH"; then
            echo "No changes → nothing to commit."
          else
            git config user.name  "${{ github.actor }}"
            git config user.email "${{ github.actor }}@users.noreply.github.com"
            git add "$FILEPATH"
            git commit -m "status: $(date -u +%FT%TZ) [skip vercel]"
            git push origin main
            echo "Pushed update."
          fi