name: Update Bedrock Status

on:
  schedule: [{ cron: "*/5 * * * *" }]   # alle 5 Minuten
  workflow_dispatch: {}

permissions:
  contents: write

env:
  FILEPATH: "data/status.json"
  KEEP: "2016"   # 7 Tage à 5-Minuten
  API_URL: "https://mc-server-status-black.vercel.app/api/bedrock"

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main
          persist-credentials: true

      - name: Install jq & curl
        run: sudo apt-get update && sudo apt-get install -y jq curl

      # --- FIX: kein Heredoc, Datei sauber mit jq anlegen ---
      - name: Ensure status file exists
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$(dirname "$FILEPATH")"
          if [ ! -s "$FILEPATH" ]; then
            jq -n \
              --arg name "Minecraft Bedrock" \
              --arg host "important-instrumentation.gl.at.ply.gg" \
              --argjson port 18232 \
              '{generated:"", service:{name:$name, host:$host, port:$port}, history:[]}' \
              > "$FILEPATH"
            echo "Created $FILEPATH"
          else
            echo "Found $FILEPATH"
          fi

      # --- robuster Fetch: Fehler => offline statt null ---
      - name: Pull latest status from Vercel API (robust)
        id: ping
        shell: bash
        run: |
          set -euo pipefail

          : "${API_URL:?API_URL not set}"
          echo "GET $API_URL"

          if ! curl --fail --show-error --silent --max-time 12 "$API_URL" -o resp.json; then
            echo "curl failed → treat as offline"
            echo '{"ok":false,"generated":null,"service":{}}' > resp.json
          fi

          if ! jq -e 'has("ok") and (.ok|type=="boolean")' resp.json > /dev/null; then
            echo "response has no boolean .ok → treat as offline"
            jq '.ok=false' resp.json > resp.fixed.json && mv resp.fixed.json resp.json
          fi

          echo "----- resp.json -----"
          cat resp.json
          echo "---------------------"

          echo "ok=$(jq -r '.ok' resp.json)"                         >> "$GITHUB_OUTPUT"
          echo "ts=$(jq -r '.generated // now|todate' resp.json)"    >> "$GITHUB_OUTPUT"
          echo "host=$(jq -r '.service.host // empty' resp.json)"    >> "$GITHUB_OUTPUT"
          echo "port=$(jq -r '.service.port // empty' resp.json)"    >> "$GITHUB_OUTPUT"

      - name: Append + trim history
        shell: bash
        run: |
          set -euo pipefail
          ts='${{ steps.ping.outputs.ts }}'
          ok='${{ steps.ping.outputs.ok }}'
          host='${{ steps.ping.outputs.host }}'
          port='${{ steps.ping.outputs.port }}'

          : "${ts:=$(date -u +%FT%TZ)}"
          : "${ok:=false}"

          jq --arg ts "$ts" \
             --argjson ok ${ok} \
             --arg host "$host" \
             --argjson port ${port:-0} \
             --argjson keep ${KEEP:-2016} '
              if .service == null then .service = {} else . end |
              .service.host = (if $host != "" then $host else .service.host end) |
              .service.port = (if $port != 0  then $port else .service.port end) |
              .history += [{"ts":$ts,"ok":$ok}] |
              .history |= (.[-($keep|tonumber):] // .) |
              .generated = $ts
            ' "$FILEPATH" > "$FILEPATH.tmp"

          mv "$FILEPATH.tmp" "$FILEPATH"
          echo "Updated $FILEPATH"

      # >>> LATENCY: minimaler Block
      - name: Ensure latency.json exists
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p public
          [ -f public/latency.json ] || echo "[]" > public/latency.json

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Prepare HOST/PORT for latency
        id: latenv
        shell: bash
        run: |
          set -euo pipefail
          host=$(jq -r '.service.host // empty' "$FILEPATH")
          port=$(jq -r '.service.port // empty' "$FILEPATH")
          : "${host:=important-instrumentation.gl.at.ply.gg}"
          : "${port:=18232}"
          echo "host=$host" >> "$GITHUB_OUTPUT"
          echo "port=$port" >> "$GITHUB_OUTPUT"

      - name: Measure Bedrock UDP latency (RakNet)
        shell: bash
        env:
          HOST: ${{ steps.latenv.outputs.host }}
          PORT: ${{ steps.latenv.outputs.port }}
          SAMPLES: "5"
          TIMEOUT: "1.2"
        run: |
          set -euo pipefail
          python3 scripts/bedrock_latency.py > latency_one.json
          jq -e . latency_one.json > /dev/null
          tmp=$(mktemp)
          jq -s '.[0] + [.[1]]' public/latency.json latency_one.json > "$tmp" && mv "$tmp" public/latency.json

      - name: Trim latency.json (90 days)
        shell: bash
        run: |
          set -euo pipefail
          now=$(date -u +%s)
          tmp=$(mktemp)
          jq --arg now "$now" '
            map(select(
              (try (.ts | sub("Z$";"") | fromdateiso8601) catch 0) >= ($now|tonumber - 90*24*3600)
            ))
          ' public/latency.json > "$tmp" && mv "$tmp" public/latency.json
      # <<< LATENCY Ende

      - name: Commit & push (data + latency)
        shell: bash
        run: |
          set -euo pipefail
          if git diff --quiet -- "$FILEPATH" "public/latency.json"; then
            echo "No changes"
          else
            git config user.name  "${{ github.actor }}"
            git config user.email "${{ github.actor }}@users.noreply.github.com"
            git add "$FILEPATH" "public/latency.json"
            git commit -m "history+latency: $(date -u +%FT%TZ) [skip vercel]"
            git push origin main
            echo "Pushed update"
          fi
